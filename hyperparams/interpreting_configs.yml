defaults:
    device: gpu
    gpu_device: 0
    data_dir: data/
    log_dir_base: generative/
    generated_data_dir: generative/rec_gen_mod_data/

    agent_gm: # Separate from the configs dedicated to training and rendering the agent because they're just dummy configs here for instantiating the agent
        log_level: 40
        num_checkpoints: 1
        num_threads: 8
        env_name: coinrun
        distribution_mode: hard
        algo: ppo
        n_envs: 16
        n_steps: 1
        epoch: 3
        mini_batch_per_epoch: 8
        mini_batch_size: 8192
        gamma: 0.999
        lmbda: 0.95
        learning_rate: 0.0005
        grad_clip_norm: 0.5
        eps_clip: 0.2
        value_coef: 0.5
        entropy_coef: 0.01
        normalize_adv: True
        normalize_rew: True
        use_gae: True
        architecture: impala
        recurrent: True

    gen_model:
        log_interval: 10
        save_interval: 10000
        lr: 0.0005
        batch_size: 2
        epochs: 1000
        num_init_steps: 3
        num_steps_full:
        num_sim_steps: 32
        stoch_discrete: 32
        stoch_dim: 32
        env_h_stoch_size: 1024
        agent_hidden_size: 64
        action_space_size: 15
        deter_dim: 512
        initializer_rnn_hidden_size: 512
        layer_norm: True
        hidden_dim: 1000
        image_channels: 3
        cnn_depth: 48
        reward_decoder_layers: 4
        terminal_decoder_layers: 4
        kl_weight: 12.0
        kl_balance: 0.8
        bottleneck_loss_weight: 100.0
        bottleneck_vec_size: 128
        env_update_penalty_weight: 0.5
        swap_directions_from: null
        swap_directions_to: null

    record:  # as in record_gen_samples.py not record.py which records real rollouts
        rand_init: False
        max_samples: 6000

    analysis:
        tsne_seed: 42
        presaved_data_path: /media/lee/DATA/DDocs/AI_neuro_work/assurance_project_stuff/data/precollected/
        save_dir: analysis/
        agent_h:
            informed_or_random_init: informed_init
            num_episodes: 4000
            num_generated_samples: 200
            num_epi_paths: 9
            n_components_pca: 64
            n_components_tsne: 2
            n_components_nmf: 16
            n_components_ica: 16
            n_clusters: 32
            nmf_max_iter: 5000
            nmf_tol: 0.0001
            ica_max_iter: 8000
            ica_tol: 0.02
            outlier_max_k: 6
            precomputed_analysis_data_path: analysis/hx_analysis_precomp/
        env_h:
            num_samples: 6000 # Number of generated samples to use
            num_epi_paths: 9 # Number of episode to plot paths through time for. Arrow plots.
            n_components_pca: 128
            n_components_tsne: 2
            n_components_nmf: 64
            n_clusters: 128
            nmf_max_iter: 5000
            nmf_tol: 0.0001
            first_pc_ind: 0
            second_pc_ind: 1
            third_pc_ind: 2
            precomputed_analysis_data_path: analysis/env_analysis_precomp/
        combined_agent_env_hx:
            num_samples: 4000
            n_components_pca: 64
            n_components_tsne: 3
            n_clusters: 32
            timestep_differences: [2, 4, 6]
            precomputed_analysis_data_path: analysis/combined_agent_env_hx_analysis_precomp/
        bottleneck:
            num_samples: 1000
            n_components_pca: 128
            n_components_tsne: 2
            n_clusters: 100
            plot_pca: True
            plot_3d_pca_all: True
            plot_clusters: True
            plot_tsne: True
            first_pc_ind: 0
            second_pc_ind: 1
            precomputed_analysis_data_path: analysis/bottleneck_vec_analysis_precomp/
        jacobian:
            num_samples: 4000
            grad_timestep: 3
            n_components_pca: 128
            n_components_tsne: 2
            n_clusters: 32
            nmf_max_iter: 5000
            nmf_tol: 0.0001
            first_pc_ind: 0
            second_pc_ind: 1
            third_pc_ind: 2
            precomputed_analysis_data_path: analysis/jacob_analysis_precomp/
        loss_over_time:
            num_batches: 16
        plot_act_and_val_weights:
            save_dir: analysis/plot_act_and_val_weights
        saliency:
            demo_savedir: analysis/demo_with_without_env_grads
            difference_demo_sample_ids: ['0', 'to', '100']
            num_sim_steps: 10
            num_sim_steps_manual_actions: 32
            common_timesteps: [4]
            direction_type: ica
            func_type: [value, action, hx_direction]
            direction_ids: ['0', 'to', '16']
            sample_ids: ['0', 'to', '4000']
            extrema_threshold: 0.01
            batch_size: 9
            combine_samples_not_iterate: False
            perturbation_scale: 0.000125
            gaussian_kernel_size: 5.
            sigma: 5.
        target_func:
            save_dir: analysis/target_func_exps/
            batch_size: 16
            num_sim_steps: 10
            func_type: ['hx_direction', 'hx_neuron'] #[hx_direction]
            func_incr_or_decr: ['increase', 'decrease']
            action_ids: ['0', 'to', '2']
            direction_ids: ['0', 'to', '16']  # increase for after development
            hx_neuron_ids: ['0', 'to', '16']
            sample_ids: ['0', 'to', '2']
            viz_batch_size: 16
            lr: 0.001 #action 0.01 # hx_neuron 0.001 # value 0.005 # hx_direction
            min_loss: 0.001
            num_its: 20000
            num_epochs: 1
            default_timesteps: [4]
            hx_timesteps: [4]
            targ_func_loss_scale: 1.
            hx_target_func_loss_scale: 100.
            directions_scale: 0.05
            num_samples_precomputed: 4000
            distance_threshold: 0.1
            num_its_value: 100000
        xplots:
            save_dir: "cross_corr_and_causation_plots"
            save_dir_data: "cross_corr_and_causation_plot_data"
            extrema_threshold: 0.02
        dyn_grad_comparison:
            save_dir: "dyn_grad_comparison_plots"
            save_dir_data: "dyn_grad_comparison_data"





walter:
    algo: ppo
